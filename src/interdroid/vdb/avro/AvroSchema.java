package interdroid.vdb.avro;


import org.apache.avro.Schema;

public class AvroSchema {

	private AvroSchema() {
		// No Construction;
	}

	public static final String NAMESPACE = "org.apache.avro";
	public static final Schema SCHEMA;
	public static final Schema RECORD;
	public static final String RECORD_DEFINITION = "RecordDef";

	// TODO: It would be nice to support cross namespace records and such.
	// TODO: Extract constants
	
	static {
		// Taken from proposed schema for schemas:
		String schema =
			"{\"type\": \"record\", \"name\": \"SchemaDef\", \"namespace\": \"org.apache.avro\","
			+"\n \"fields\": ["
			+"\n     {\"name\": \"type\", \"type\": ["
			+"\n         {\"type\": \"record\", \"name\": \"RecordDef\","
			+"\n          \"fields\": ["
			+"\n              {\"name\": \"name\", \"type\": \"string\"},"
			+"\n              {\"name\": \"documentation\", \"type\": \"string\"},"
			+ "\n             {\"name\": \"namespace\", \"type\": \"string\"},"
			+"\n              {\"name\": \"fields\","
			+"\n               \"type\": {\"type\": \"array\", \"items\":"
			+"\n                        {\"type\": \"record\", \"name\": \"FieldDef\","
			+"\n                         \"fields\": ["
			+"\n                             {\"name\": \"name\", \"type\": \"string\"},"
			+"\n                             {\"name\": \"type\", \"type\": \"SchemaDef\"},"
			+"\n                             {\"name\": \"defaultValue\", \"type\":"
			+"\n                              {\"type\": \"record\", \"name\": \"JsonValue\","
			+"\n                               \"fields\": ["
			+"\n                                   {\"name\": \"value\","
			+"\n                                    \"type\": ["
			+"\n                                        \"long\", \"double\", \"string\","
			+"\n                                        \"boolean\", \"null\","
			+"\n                                        {\"type\": \"record\", \"name\": \"JsonArray\","
			+"\n                                         \"fields\":["
			+"\n                                             {\"name\": \"elements\","
			+"\n                                              \"type\": {\"type\": \"array\","
			+"\n                                                       \"items\": \"JsonValue\"}}"
			+"\n                                         ]"
			+"\n                                        },"
			+"\n                                        {\"type\": \"array\", \"items\": "
			+"\n                                         {\"type\": \"record\", \"name\": \"JsonField\","
			+"\n                                          \"fields\": ["
			+"\n                                              {\"name\": \"name\", \"type\": \"string\"},"
			+"\n                                              {\"name\": \"value\", \"type\": \"JsonValue\"}"
			+"\n                                          ]"
			+"\n                                         }"
			+"\n                                        }"
			+"\n                                    ]"
			+"\n                                   }"
			+"\n                               ]"
			+"\n                              }"
			+"\n                             },"
			+"\n                             {\"name\": \"order\","
			+"\n                              \"type\": {\"type\": \"enum\", \"name\": \"FieldOrder\","
			+"\n                                       \"symbols\": [\"INCREASING\", \"DECREASING\","
			+"\n                                                   \"IGNORE\"]}}"
			+"\n                         ]"
			+"\n                        }"
			+"\n                       }"
			+"\n              }"
			+"\n          ]"
			+"\n         },"
			+"\n         {\"type\": \"record\", \"name\": \"EnumDef\","
			+"\n          \"fields\": ["
			+"\n              {\"name\": \"name\", \"type\": \"string\"},"
			+"\n              {\"name\": \"symbols\","
			+"\n               \"type\": {\"type\": \"array\", \"items\": \"string\"}}"
			+"\n          ]"
			+"\n         },"
			+"\n         {\"type\": \"record\", \"name\": \"ArrayDef\","
			+"\n          \"fields\": ["
			+"\n              {\"name\": \"elements\", \"type\": \"SchemaDef\"}"
			+"\n          ]"
			+"\n         },"
			+"\n         {\"type\": \"record\", \"name\": \"MapDef\","
			+"\n          \"fields\": ["
			+"\n              {\"name\": \"values\", \"type\": \"SchemaDef\"}"
			+"\n          ]"
			+"\n         },"
			+"\n         {\"type\": \"record\", \"name\": \"UnionDef\","
			+"\n          \"fields\": ["
			+"\n              {\"name\": \"branches\","
			+"\n               \"type\": {\"type\": \"array\", \"items\": \"SchemaDef\"}}"
			+"\n          ]"
			+"\n         },"
			+"\n         {\"type\": \"record\", \"name\": \"FixedDef\","
			+"\n          \"fields\": ["
			+"\n              {\"name\": \"name\", \"type\": \"string\"},"
			+"\n              {\"name\": \"size\", \"type\": \"int\"}"
			+"\n          ]"
			+"\n         },"
			+"\n         {\"type\": \"record\", \"name\": \"StringDef\", \"fields\": [] },"
			+"\n         {\"type\": \"record\", \"name\": \"BytesDef\", \"fields\": [] },"
			+"\n         {\"type\": \"record\", \"name\": \"IntDef\", \"fields\": [] },"
			+"\n         {\"type\": \"record\", \"name\": \"LongDef\", \"fields\": [] },"
			+"\n         {\"type\": \"record\", \"name\": \"FloatDef\", \"fields\": [] },"
			+"\n         {\"type\": \"record\", \"name\": \"DoubleDef\", \"fields\": [] },"
			+"\n         {\"type\": \"record\", \"name\": \"BooleanDef\", \"fields\": [] },"
			+"\n         {\"type\": \"record\", \"name\": \"NullDef\", \"fields\": [] },"
			+"\n         \"string\""
			+"\n         ]"
			+"\n     }"
			+"\n ]"
			+"\n}";
//			"{\"type\": \"record\", \"name\": \"Schema\", \"namespace\": \"org.apache.avro\","
//			+ "\n \"fields\": ["
//			+ "\n     {\"name\": \"type\", \"type\": ["
//			+ "\n         {\"type\": \"record\", \"name\": \"Record\","
//			+ "\n          \"fields\": ["
//			+ "\n              {\"name\": \"name\", \"type\": \"string\"},"
//			+ "\n              {\"name\": \"namespace\", \"type\": \"string\"},"
//			+ "\n              {\"name\": \"doc\", \"type\": \"string\"},"
//			+ "\n              {\"name\": \"error\", \"type\": \"boolean\"},"
//			+ "\n              {\"name\": \"fields\","
//			+ "\n               \"type\": {\"type\": \"array\", \"items\":"
//			+ "\n                        {\"type\": \"record\", \"name\": \"Field\","
//			+ "\n                         \"fields\": ["
//			+ "\n                             {\"name\": \"name\", \"type\": \"string\"},"
//			+ "\n                             {\"name\": \"doc\", \"type\": \"string\"},"
//			+ "\n                             {\"name\": \"type\", \"type\": \"Schema\"},"
//			+ "\n                             {\"name\": \"defaultValue\","
//			+ "\n                              \"type\": [\"null\", "
//			+ "\n                                         {\"type\": \"record\", \"name\": \"Json\", \"namespace\": \"org.json\","
//			+ "\n                                          \"fields\": ["
//			+ "\n                                              {\"name\": \"value\","
//			+ "\n                                               \"type\": ["
//			+ "\n                                                   \"long\","
//			+ "\n                                                   \"double\","
//			+ "\n                                                   \"string\","
//			+ "\n                                                   \"boolean\","
//			+ "\n                                                   \"null\","
//			+ "\n                                                   {\"type\": \"record\", \"name\": \"Array\","
//			+ "\n                                                    \"fields\":["
//			+ "\n                                                        {\"name\": \"elements\", \"type\": {\"type\": \"array\", \"items\": \"Json\"}}"
//			+ "\n                                                    ]"
//			+ "\n                                                   },"
//			+ "\n                                                   {\"type\": \"array\", \"items\": "
//			+ "\n                                                    {\"type\": \"record\", \"name\": \"Field\","
//			+ "\n                                                     \"fields\": ["
//			+ "\n                                                         {\"name\": \"name\", \"type\": \"string\"},"
//			+ "\n                                                         {\"name\": \"value\", \"type\": \"Json\"}"
//			+ "\n                                                     ]"
//			+ "\n                                                    }"
//			+ "\n                                                   }"
//			+ "\n                                               ]"
//			+ "\n                                              }"
//			+ "\n                                          ]"
//			+ "\n                                         }"
//			+ "\n                                        ] },"
//			+ "\n                             {\"name\": \"order\","
//			+ "\n                              \"type\": [\"null\","
//			+ "\n                                         {\"type\": \"enum\", \"name\": \"FieldOrder\","
//			+ "\n                                           \"symbols\": [\"INCREASING\", \"DECREASING\","
//			+ "\n                                                   \"IGNORE\"]}]}"
//			+ "\n                         ]"
//			+ "\n                        }"
//			+ "\n                       }"
//			+ "\n              }"
//			+ "\n          ]"
//			+ "\n         },"
//			+ "\n         {\"type\": \"record\", \"name\": \"Enum\","
//			+ "\n          \"fields\": ["
//			+ "\n              {\"name\": \"name\", \"type\": \"string\"},"
//			+ "\n              {\"name\": \"namespace\", \"type\": \"string\"},"
//			+ "\n              {\"name\": \"symbols\","
//			+ "\n               \"type\": {\"type\": \"array\", \"items\": \"string\"}}"
//			+ "\n          ]"
//			+ "\n         },"
//			+ "\n         {\"type\": \"record\", \"name\": \"Array\","
//			+ "\n          \"fields\": ["
//			+ "\n              {\"name\": \"elements\", \"type\": \"Schema\"}"
//			+ "\n          ]"
//			+ "\n         },"
//			+ "\n         {\"type\": \"record\", \"name\": \"Map\","
//			+ "\n          \"fields\": ["
//			+ "\n              {\"name\": \"values\", \"type\": \"Schema\"}"
//			+ "\n          ]"
//			+ "\n         },"
//			+ "\n         {\"type\": \"record\", \"name\": \"Union\","
//			+ "\n          \"fields\": ["
//			+ "\n              {\"name\": \"branches\","
//			+ "\n               \"type\": {\"type\": \"array\", \"items\": \"Schema\"}}"
//			+ "\n          ]"
//			+ "\n         },"
//			+ "\n         {\"type\": \"record\", \"name\": \"Fixed\","
//			+ "\n          \"fields\": ["
//			+ "\n              {\"name\": \"name\", \"type\": \"string\"},"
//			+ "\n              {\"name\": \"size\", \"type\": \"int\"}"
//			+ "\n          ]"
//			+ "\n         },"
//			+ "\n         {\"type\": \"record\", \"name\": \"String\","
//			+ "\n          \"fields\": ["
//			+ "\n              {\"name\": \"string\", \"type\": \"string\"}"
//			+ "\n          ]"
//			+ "\n         },"
//			+ "\n         {\"type\": \"record\", \"name\": \"Bytes\","
//			+ "\n          \"fields\": ["
//			+ "\n              {\"name\": \"string\", \"type\": \"bytes\"}"
//			+ "\n          ]"
//			+ "\n         },"
//			+ "\n         {\"type\": \"record\", \"name\": \"Integer\","
//			+ "\n          \"fields\": ["
//			+ "\n              {\"name\": \"string\", \"type\": \"int\"}"
//			+ "\n          ]"
//			+ "\n         },"
//			+ "\n         {\"type\": \"record\", \"name\": \"Long\","
//			+ "\n          \"fields\": ["
//			+ "\n              {\"name\": \"string\", \"type\": \"long\"}"
//			+ "\n          ]"
//			+ "\n         },"
//			+ "\n         {\"type\": \"record\", \"name\": \"Float\","
//			+ "\n          \"fields\": ["
//			+ "\n              {\"name\": \"string\", \"type\": \"float\"}"
//			+ "\n          ]"
//			+ "\n         },"
//			+ "\n         {\"type\": \"record\", \"name\": \"Double\","
//			+ "\n          \"fields\": ["
//			+ "\n              {\"name\": \"string\", \"type\": \"double\"}"
//			+ "\n          ]"
//			+ "\n         },"
//			+ "\n         {\"type\": \"record\", \"name\": \"Boolean\","
//			+ "\n          \"fields\": ["
//			+ "\n              {\"name\": \"string\", \"type\": \"boolean\"}"
//			+ "\n          ]"
//			+ "\n         },"
//			+ "\n         \"null\""
//			+ "\n         ]"
//			+ "\n     }"
//			+ "\n ]"
//			+ "\n}";

		SCHEMA = Schema.parse(schema);
		RECORD = SCHEMA.getField("type").schema().getTypes().get(0);
	}
}
